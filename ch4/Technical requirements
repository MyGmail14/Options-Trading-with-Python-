Technical requirements

To ensure a smooth learning experience throughout this book, it's essential to have the necessary technologies and installations set up. This section outlines the technical requirements for working with Python and relevant libraries.
All technical requirement related to this chapter are shared in the book’s GitHub URL below under ch4 folder: https://github.com/PacktPublishing/Options-Trading-with-Python-/tree/main/ch4

Python and Anaconda installation
To begin, you'll need to install the latest version of Python on your computer. Visit the official Python website (https://www.python.org/downloads/) to download and install the appropriate version for your operating system. Be sure to select the option to add Python to your system's path during the installation process.
I highly recommend using Anaconda as it is a very popular and effective Python distribution for scientific computing. Anaconda simplifies package management and deployment. Download it from Anaconda's official website (https://www.anaconda.com/). Anaconda can be considered a valuable tool alongside various Python Integrated development environments (IDEs), as it provides both package management and environment management features.

Integrated development environments (IDEs)
Although not strictly required, using an IDE can significantly enhance your coding experience. Popular Python IDEs include Visual Studio Code available at (https://code.visualstudio.com/), PyCharm available at (https://www.jetbrains.com/pycharm/), and Jupyter Notebook available at (https://jupyter.org/). 
As for JupyterLab, it’s a more advanced iteration of Jupyter Notebook, offering a flexible and powerful user interface for data science applications. JupyterLab extends the classic notebook interface, providing a more modular environment where you can open multiple notebooks or other files (like data files, text, markdown, etc.) in tabs within the same window. It supports interactive data visualization and easy drag-and-drop functionality, enhancing the interactivity and productivity of your work. Its integration with tools like GitHub and Docker is also streamlined, making it a preferred choice for more complex projects. Additionally, JupyterLab allows for custom extensions, which can add functionalities tailored to specific data science needs.
I am personally a big fan and user of JupyterLab, so you may want to give that a try as it offers a comprehensive development environment specifically designed to meet the diverse requirements of data science projects.
Choose an IDE that best suits your preferences and install it on your system.

Package manager
Python’s package manager, pip, allows you to easily install and manage libraries. Pip is typically included with Python installations (version 3.4 and later). To verify that pip is installed, open a command prompt or terminal window and enter the following command:
pip –version
Should pip not be installed on your system, please consult the official pip documentation for installation guidance, available at  (https://pip.pypa.io/en/stable/installation/).

Creating the “mboptions” Environment
To accommodate the evolving nature of Python and its libraries, it’s highly recommended to create a dedicated Python environment for the book. This environment, which I named mboptions, will encapsulate the specific Python version and libraries used in this book, ensuring consistency and compatibility. Here are the steps to create and use this environment with and without Anaconda:
Creating a Python environment without using Anaconda involves using venv, which is a module that comes natively with Python (version 3.3 and above). The process is straightforward and allows you to create an isolated environment for your project. Here’s how you can create the mboptions environment using venv:

1.	Creating the mboptions Environment with venv
a.	Ensure Python is Installed: 
i.	First, make sure you have Python installed on your system. You can check this by running the following command in your command prompt or terminal:
python --version
b.	Create a New Directory: 
i.	If need be, create a new directory where you want to store your mboptions environment. Navigate to this directory in your terminal.
c.	Create the Virtual Environment: 
i.	Run the following command to create a new virtual environment named mboptions within the directory:
python -m venv mboptions
ii.	This command will create a folder named mboptions in your current directory, containing the Python interpreter and other necessary files.
d.	Activate the Virtual Environment:
i.	To activate the mboptions environment, you need to run the activation script that’s created in the environment's Scripts directory.
ii.	On Windows, use:
mboptions\Scripts\activate
iii.	On macOS or Linux, use:
source mboptions/bin/activate
iv.	Your command prompt should now indicate that you are inside the mboptions environment.
e.	Install Required Packages:
i.	Now, with the environment activated, install the required packages using pip. For instance:
pip install numpy
ii.	You can install all the required packages listed in a requirements.txt file (if provided in your book's resources) by running:
pip install -r ch04requirements.txt
f.	Deactivating the Environment:
i.	When you're done working in the virtual environment and want to return to your system’s default Python, simply run:
Deactivate

2.	Using mboptions Environment in the Terminal
a.	While the mboptions environment is active, any Python scripts you run or packages you install will be confined to this environment.
b.	Remember to activate the mboptions environment whenever you are working on your project by navigating to your project directory and running the activation command specific to your operating system.
Important note
This method of creating a virtual environment is particularly useful for those who prefer a lightweight setup or are working in environments where Anaconda might not be available or preferred. It provides the necessary isolation for project dependencies, ensuring a consistent development environment.

Anaconda can be considered a valuable tool alongside IDEs, as it provides both package management and environment management features.

3.	Create the Environment using anaconda:
Anaconda can be considered a valuable tool alongside IDEs, as it provides both package management and environment management features. Assuming Anaconda is already installed as explained above here the steps to follow
a.	Create the Environment
i.	Open Anaconda Prompt or your terminal.
ii.	Run the following command to create a new environment named “mboptions”:
conda create -n mboptions python=x
iii.	Replace "x" with the specific Python version referenced in the book, which is currently 3.11.7. While other versions might work, using 3.11.7 ensures compatibility and minimizes the risk of encountering unexpected issues with the packages. If you face any error messages, it's advisable to use this version, as the code has been tested and verified on it.
b.	Activate the Environment:
i.	Activate the mboptions environment by running:
conda activate mboptions

4.	Install Required Packages:
a.	Install each required package using conda or pip. For example:
conda install numpy
or
pip install numpy
b.	Refer to the ch04requirements.txt or similar file in the book’s GitHub repository for a list of necessary packages.

5.	Using the mboptions Environment in IDEs
a.	Visual Studio Code:
i.	Open Visual Studio Code.
ii.	Go to the command palette (Ctrl+Shift+P).
iii.	Type and select “Python: Select Interpreter.”
iv.	Choose the interpreter that lists the mboptions environment.
b.	PyCharm:
i.	Open PyCharm and navigate to “File” > “Settings” > “Project” > “Python Interpreter.”
ii.	Click on the gear icon, then “Add.”
iii.	Select “Conda Environment” and choose the mboptions environment.
c.	Jupyter Notebook:
i.	Ensure Jupyter is installed in the mboptions environment.
ii.	Activate the mboptions environment.
iii.	Start Jupyter Notebook by running jupyter notebook.
d.	Jupyter Lab:
i.	Ensure Jupyter Lab is installed in the mboptions environment.
ii.	Activate the mboptions environment.
iii.	Start Jupyter Lab by running jupyter lab.
By following these steps, you ensure that your work in this book is done within a stable and consistent environment, making it easier to replicate results and troubleshoot issues that may arise due to differences in software versions.

Libraries needed for this chapter and installation
Once Python and pip are set up, you'll need to install the libraries needed for this chapter if not installed yet.
The libraries versions installed for this chapter along with Python version 3.11.7 are as follow:
•	pandas             2.2.2
•	pytz               2024.1
•	numpy              1.26.4
•	matplotlib         3.8.4
•	yfinance           0.2.37
•	python-dateutil    2.9.0.post0

To install the necessary libraries for your Python script, you will need to use either pip or conda. Here's how you can do it:

1.	Using pip
a.	To install the libraries with pip, use the following commands in your terminal or command prompt:
pip install pandas
pip install pytz
pip install numpy
pip install matplotlib
pip install yfinance
pip install python-dateutil
b.	These commands will install all the required libraries: pandas, pytz, numpy, matplotlib, yfinance, and python-dateutil.
2.	Using conda
a.	If you're using Anaconda and prefer to use conda for installation, you can use these commands:
conda install pandas
conda install pytz
conda install numpy
conda install matplotlib
conda install -c ranaroussi yfinance
conda install python-dateutil
b.	For yfinance, since it might not be available directly through the default channels in conda, the command uses the -c option to specify a channel where yfinance is available (ranaroussi in this case).
c.	Unfortunately, Conda does not directly support the conda install -r requirements.txt command in the same way that pip does. Conda and pip manage packages in different ways, and the file formats for their respective requirements are not directly interchangeable. However, you can achieve a similar effect in Conda with a little adjustment. Instead of a simple list of install commands, you create a environment.yml file. This file specifies both the environment details and the required packages.
Here’s how you can create and use an environment.yml file for your requirements:
i.	Open a Text Editor: Create a new file in your text editor.
ii.	Specify Environment Details and Dependencies: Structure your file like this:
name: ch04env
channels:
  - defaults
  - conda-forge
  - ranaroussi
dependencies:
  - pandas
  - pytz
  - numpy
  - matplotlib
  - yfinance
  - python-dateutil
1.	name: This is the name of your new environment.
2.	channels: These are the sources where Conda looks for packages. conda-forge is a widely-used community channel.
3.	dependencies: List of packages you want to install.
iii.	Save the File: Save this as environment.yml (or another name if you prefer, but with .yml extension) in your project directory.
iv.	To use the environment.yml File to Create the Environment:
1.	Create the Environment by running the following 2 commands in your terminal:
conda env create -f environment.yml
This will create a new environment with the name specified and install the listed packages.
2.	To activate the environment, use:
conda activate ch04env
v.	Notes on using the environment.yml approach:
1.	The environment.yml approach is particularly useful for creating reproducible Conda environments, as it can include specific versions of packages and even Python itself.
2.	If you already have an existing environment and just want to install the listed dependencies, modify the environment.yml to match the existing environment's name, or manually install the dependencies using conda install package_name.
3.	Remember, the environment.yml file is a key part of Conda's way of managing complex environments and is particularly useful for projects that will be shared or worked on collaboratively.

3.	Notes on Modules:
a.	The datetime, os, datetime.datetime, datetime.date, datetime.time, and math.trunc modules are part of the standard Python library, so they do not need to be installed separately.
b.	Remember to activate your Python environment (like mboptions) before installing these packages.
c.	It's a good practice to periodically update these packages to maintain compatibility and security. This can be done using pip install --upgrade package-name or conda update package-name.

Important note
As we delve deeper into the book, we will introduce more specialized finance and options valuation libraries to enhance your understanding of the subject matter. These libraries will provide you with advanced tools and functionalities, allowing you to tackle complex options pricing scenarios and gain valuable insights.

Loading needed Libraries and modules
For this chapter, we'll initiate our Python code by first importing the necessary libraries and modules, as outlined below:
# import Libs
import pandas as pd
import datetime as dt
import pytz
import os
import numpy as np
import matplotlib.pyplot as plt
import yfinance as yf

# import modules
from datetime import datetime, timezone
from datetime import date, time
from math import trunc
from dateutil.parser import parse

With these technical requirements in place, you're now ready to dive into the world of options pricing using Python. As you progress through the book, you'll gain hands-on experience and practical skills by working with these powerful tools and libraries.
